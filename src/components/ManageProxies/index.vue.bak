<script lang="ts" setup>
import { Component, h, inject, Ref, ref, provide } from 'vue';
import { useRouter } from 'vue-router';

import { AxiosError } from 'axios';
import copy from 'copy-to-clipboard';
// import dayjs from 'dayjs';
import {
  DialogOptions,
  NButton,
  NIcon,
  NSwitch,
  NTooltip,
  useDialog,
  useLoadingBar,
  useMessage,
} from 'naive-ui';

import frpApiChangeProxy from '@/requests/frpApi/frpApiChangeProxy';
import frpApiEditProxy from '@/requests/frpApi/frpApiEditProxy';
import frpApiForceOff from '@/requests/frpApi/frpApiForceOff';
import frpApiGetUserProxies from '@/requests/frpApi/frpApiGetUserProxies';
import frpApiRefreshProxyStatus from '@/requests/frpApi/frpApiRefreshProxyStatus';
import frpApiRemoveProxy from '@/requests/frpApi/frpApiRemoveProxy';
import {
  AddOutline,
  CloseOutline,
  CopyOutline,
  RefreshOutline,
  TelescopeOutline,
} from '@vicons/ionicons5';

import Edit from './Edit.vue';
import GetConf from './GetConf.vue';
import Infomation from './Infomation.vue';
import Menu from './Menu.vue';

import './style.less';

const { userInfo } = inject<{ userInfo: Ref<Struct.UserInfo> }>('userInfo') || {};
const dialog = useDialog();
const router = useRouter();
const message = useMessage();
// 提供message给子组件
provide('message', message);
const loadingBar = useLoadingBar();
const renderIcon = (icon: Component, size = '16px') => {
  return () => {
    return h(
      NIcon,
      { size },
      {
        default: () => h(icon),
      },
    );
  };
};
const handleOnSelected = (key: string, row: Struct.UserProxy) => {
  switch (String(key)) {
    case 'refreshState': {
      isChaning.value = true;
      refreshUserProxyState(row.id);
      setTimeout(() => {
        isChaning.value = false;
      }, 550);
      break;
    }
    case 'getConf': {
      const content = ref<string>();

      const dx = dialog.info({
        showIcon: false,
        blockScroll: true,
        title: `获取配置 隧道 ${row.proxyName}`,
        content: () =>
          h(GetConf, {
            proxy: row,
            token: userInfo?.value.token ?? '',
            fallback(x: string) {
              if (dx.positiveButtonProps != null) {
                dx.positiveButtonProps.disabled = x === null;
              }
              content.value = x;
            },
          }),
        onPositiveClick(e: MouseEvent) {
          e.preventDefault();
          if (content.value != null) {
            copy(content.value);
            message.info('复制成功');
          }
        },
        positiveText: '复制',
        positiveButtonProps: {
          renderIcon: renderIcon(CopyOutline),
          disabled: true,
        },
      } as DialogOptions);
      break;
    }
    case 'getInfo': {
      dialog.info({
        showIcon: false,
        blockScroll: true,
        content: () =>
          h(Infomation, {
            proxy: row,
            copyFallback(url: string) {
              copy(url);
              message.info('复制成功');
            },
          }),
        title: `隧道 ${row.proxyName} 的信息`,
      });
      break;
    }
    case 'deleteProxy': {
      dialog.error({
        title: `移除隧道 ${row.proxyName}`,
        content: '真的要移除该隧道吗?',
        positiveText: '确认',
        negativeText: '取消',
        onPositiveClick(e: MouseEvent) {
          e.preventDefault();
          frpApiRemoveProxy({ proxy_id: row.id }).then((res) => {
            if (res.flag) {
              refreshUserProxies();
            } else {
              message.error(res.msg);
              loadingBar.error();
            }
          });
        },
      });
      break;
    }
    case 'editConf': {
      const state = ref<boolean>(false);
      const ctrl = h(Edit, {
        isEditMode: true,
        editConfig: row,
        nodeConfig: undefined,
        watchDog: state,
        fallback(success: boolean, body: Struct.EditOrNewUserProxy | undefined) {
          d.loading = true;
          if (success && body !== undefined) {
            frpApiEditProxy(body)
              .then((res) => {
                if (res.flag) {
                  isChaning.value = true;
                  d?.destroy();
                  getUserProxies(false);
                  isChaning.value = false;
                } else {
                  message.error(res.msg);
                }
              })
              .catch((x) => {
                if (x instanceof AxiosError) {
                  message.error(x.message);
                }
              });
          } else {
            d.loading = false;
          }
          state.value = false;
        },
      });
      const d = dialog.info({
        blockScroll: true,
        maskClosable: false,
        showIcon: false,
        title: `编辑隧道 ${row.proxyName}`,
        content: () => ctrl,
        positiveText: '保存',
        negativeText: '舍弃',
        onPositiveClick(e: MouseEvent) {
          e.preventDefault();
          d.loading = true;
          state.value = true;
          return false;
        },
      });
      break;
    }
    case 'forceOff': {
      dialog.warning({
        title: `强制下线隧道 ${row.proxyName}`,
        content: `真的要下线隧道 ${row.proxyName}嘛？\n注: 部分节点无法远程下线。`,
        negativeText: '取消',
        positiveText: '下线隧道',
        onPositiveClick(e: MouseEvent) {
          e.preventDefault();
          forceOffProxy(row);
        },
      });
      break;
    }
    case 'startOnWeb': {
      message.loading('正在尝试拉起 CPL 启动器', { duration: 300 });
      console.log(
        '尝试启动:' + '#' + row.id + ' ' + row.proxyName + ' token: ' + userInfo?.value.token,
      );
      setTimeout(() => {
        location.href =
          'openfrp://start_proxy?proxy=' +
          row.id +
          '&user=' +
          userInfo?.value.token +
          '&name=' +
          row.proxyName +
          '&remote=' +
          row.connectAddress;
        dialog.info({
          title: `已尝试通过 *快速启动 功能启动隧道`,
          content: `尝试启动了隧道 #${row.id} ${row.proxyName} ，若无响应请尝试手动启动。\n\n注意: 快速启动功能当前仅支持 CPL 启动器 v0.1.3 以上版本。\n\n请确保已安装 OpenFrp Cross Platform Launcher，并在 设置-启动设置 中启用 ‘允许通过快速启动隧道’ 功能。\n此功能不依赖于客户端账户登录\n\n请检查启动器 ‘隧道管理’ 页面是否存在隧道运行提示。\n\n* CPL启动器当前处于早期开发版本，可能遇到较多问题。\n`,
          negativeText: '下载 CPL 启动器',
          positiveText: '确定',
          onNegativeClick() {
            router.push('/download');
          },
          style: {
            whiteSpace: 'pre-wrap', // 或者使用 'pre-line'
          },
        });
      }, 500);

      // dialog.info({
      //   title: `将尝试通过快速启动功能启动隧道 ${row.proxyName}`,
      //   content: `真的要下线隧道 ${row.proxyName}嘛？\n注: 部分节点无法远程下线。`,
      //   negativeText: '取消',
      //   positiveText: '下线隧道',
      //   onPositiveClick(e: MouseEvent) {
      //     e.preventDefault();
      //     forceOffProxy(row);
      //   },
      // });
      break;
    }
    default:
      message.info(row.connectAddress);
      break;
  }
};
const handleChangeSwitch = (a: boolean, row: Struct.UserProxy) => {
  isChaning.value = true;
  changeUserProxyAsync(row.id, a).then((flag) => {
    if (flag && proxies.value !== undefined) {
      for (let i = 0; i < proxies.value.length; i++) {
        if (proxies.value[i].id === row.id) {
          proxies.value[i].status = a;
        }
      }
    }
    isChaning.value = false;
  });
};

const proxiesColumnDefine: any[] = [
  {
    title: '',
    key: 'online',
    render(row: Struct.UserProxy) {
      return h('div', {
        className: row.online ? 'flag-online' : 'flag-offline',
      });
    },

    width: 25,
  },
  {
    title: 'ID',
    key: 'id',
    render(row: Struct.UserProxy) {
      return h('span', {}, '# ' + row.id.toString());
    },
    ellipsis: {
      tooltip: true,
    },
    width: 90,
  },
  {
    title: '名称',
    key: 'name',
    render(row: Struct.UserProxy) {
      return h('span', {}, row.proxyName);
    },
    ellipsis: {
      tooltip: true,
    },
  },
  {
    title: '映射对象',
    key: 'target',
    render(row: Struct.UserProxy) {
      return h('span', {}, `${row.localIp}:${row.localPort}`);
    },
    ellipsis: {
      tooltip: true,
    },
  },
  {
    title: '类型',
    key: 'remotePort',
    render(row: Struct.UserProxy) {
      return h('span', {}, row.proxyType.toUpperCase());
    },
    width: 70,
  },
  {
    title: '远程端口',
    key: 'remotePort',
    render(row: Struct.UserProxy) {
      if (row.proxyType === 'http' || row.proxyType === 'https') {
        const pr = JSON.parse(row.domain) as string[];
        return h(
          NTooltip,
          { trigger: 'hover' },
          {
            trigger: () => `${pr.length} 个域名`,
            default: () =>
              h(
                'div',
                { className: 'spliter' },
                `${pr.join(',')} ${row.proxyType === 'https' ? '(均为HTTPS)' : ''}`,
              ),
          },
        );
      } else {
        return h('span', {}, row.remotePort);
      }
    },
    width: 85,
    ellipsis: {
      tooltip: true,
    },
  },
  {
    title: '所在节点',
    key: 'friendlyNode',
    ellipsis: {
      tooltip: true,
    },
    render(row: Struct.UserProxy) {
      return h('span', {}, `${row.nid}# ${row.friendlyNode}`);
    },
  },
  {
    title: '可用',
    render(row: Struct.UserProxy) {
      return h(
        NTooltip,
        { trigger: 'hover' },
        {
          trigger: () =>
            h(
              NSwitch,
              {
                value: row.status,
                disabled: isChaning.value,
                onUpdateValue: (a) => {
                  handleChangeSwitch(a, row);
                },
              },
              {},
            ),
          default: () => '这里控制的是是否允许在客户端启动',
        },
      );
    },
    width: 70,
  },
  {
    title: '操作',
    render(row: Struct.UserProxy) {
      return h(Menu, {
        proxy: row,
        fallback(key: string) {
          handleOnSelected(key, row);
        },
        btnStyle: 'margin-top:8px;margin-right:6px;',
      });
    },
    width: 70,
  },
];
const proxies = ref<Struct.UserProxy[]>();

const filltedProxies = ref<Struct.UserProxy[]>();
//  是否正在操作
const isChaning = ref(false);

// 搜索值
const searchValue = ref<string>('');

const forceOffProxy = (proxy: Struct.UserProxy) => {
  frpApiForceOff({
    proxy_id: proxy.id,
  }).then((res) => {
    if (res.flag) {
      getUserProxies(false);
      message.info(`隧道 ${proxy.proxyName} 下线成功!`);
    } else {
      message.error(res.msg);
    }
  });
};
const refreshUserProxyState = (cn: bigint) => {
  loadingBar.start();
  frpApiRefreshProxyStatus(cn).then((res) => {
    if (res.flag) {
      // success
      message.success(`隧道 #${cn} 刷新成功!`);
      getUserProxies(false);
      loadingBar.finish();
    } else {
      message.error(res.msg);
      loadingBar.error();
    }
  });
};
const changeUserProxyAsync = async (proxyId: bigint, method: boolean) => {
  loadingBar.start();
  try {
    const res = await frpApiChangeProxy({
      proxy_id: proxyId,
      proxy_do: method,
    });
    if (res.flag) {
      loadingBar.finish();
      return true;
    } else {
      message.info(res.msg);
      loadingBar.error();
    }
  } catch (error) {
    if (error instanceof Error) {
      message.error(error.message);
      loadingBar.error();
    }
  }
  return false;
};
const refreshUserProxies = () => {
  if (proxies.value != null) {
    proxies.value = [];
    isChaning.value = false;
    getUserProxies();
  } else {
    getUserProxies();
    isChaning.value = false;
  }
};
const getUserProxies = (notifiy = true) => {
  loadingBar.start();
  proxies.value = undefined;
  frpApiGetUserProxies().then((res) => {
    if (res.flag) {
      if (res.data.list !== undefined) {
        if (res.data.total === 0) {
          searchValue.value = '';
          proxies.value = [];
        } else {
          if (notifiy && proxies.value != null && !isChaning.value) {
            message.success('刷新成功!');
          }
          proxies.value = res.data.list;

          if (searchValue.value.length > 0) {
            searchForProxies(searchValue.value);
          } else {
            filltedProxies.value = proxies.value;
          }
        }
        isChaning.value = false;
      } else if (notifiy && proxies.value != null) {
        message.success('刷新成功!');
      }
      loadingBar.finish();
    } else {
      message.error(res.msg);
      loadingBar.error();
    }
  });
};
// 以下为 UI 逻辑

const searchForProxies = (value: string) => {
  if (proxies.value !== undefined) {
    if (proxies.value.length > 0) {
      const m = value.toLowerCase();
      switch (m) {
        case 'tcp': {
          filltedProxies.value = proxies.value.filter((x) => x.proxyType === 'tcp');
          return;
        }
        case 'udp': {
          filltedProxies.value = proxies.value.filter((x) => x.proxyType === 'udp');
          return;
        }
        case 'http': {
          filltedProxies.value = proxies.value.filter(
            (x) => x.proxyType === 'http' || x.proxyType === 'https',
          );
          return;
        }
        case 'https': {
          filltedProxies.value = proxies.value.filter((x) => x.proxyType === 'https');
          return;
        }
        default:
          break;
      }
      const valuePrase = Number(value);
      if (Number.isNaN(valuePrase)) {
        filltedProxies.value = proxies.value.filter(
          (x) => x.proxyName.toLowerCase().includes(m) || x.friendlyNode.includes(value),
        );
      } else {
        filltedProxies.value = proxies.value.filter(
          (x) =>
            x.proxyName.toLowerCase().includes(m) ||
            x.friendlyNode.includes(value) ||
            x.nid === valuePrase ||
            x.id.toString().includes(value) ||
            String(x.remotePort).includes(value) ||
            String(x.localPort).includes(value),
        );
      }
    } else {
      filltedProxies.value = proxies.value;
    }
    // proxies.value.filter((x) => x.proxyName.includes(value));
  }
};
getUserProxies();
</script>

<template>
  <div className="managechannel">
    <n-h2>管理隧道</n-h2>
    <n-space v-if="false" :vertical="true">
      <n-alert type="info">
        <div>
          <span>编辑和删除隧道前，隧道须处于离线状态，否则您的隧道修改不会生效。</span>
        </div>
        <div>
          <span>强制下线功能可能对部分节点无效。</span>
        </div>
        <div>
          <span>若隧道状态与您预期不符，您可点击操作列表中的刷新按钮以刷新状态。</span>
        </div>
      </n-alert>

      <n-alert type="warning">
        <div>
          <span>游戏联机非特殊需求务必不要使用非大陆节点！</span>
        </div>
      </n-alert>
    </n-space>
    <n-skeleton v-if="proxies === undefined" height="150px" width="100%" />
    <!-- Yue-cn on 2023-8-13 -->
    <template v-else>
      <n-grid responsive="screen" cols="1" item-responsive>
        <n-gi span="0 xs:1">
          <!-- For PC -->
          <!-- 正常情况 -->
          <n-space v-if="proxies !== undefined && proxies.length > 0" vertical>
            <n-card
              header-style="padding: 8px 16px;"
              footer-style="padding:0"
              :bordered="true"
              content-style="padding:0"
            >
              <template #header>
                <n-text style="font-size: 16px; font-weight: normal">
                  <template v-if="searchValue.length === 0">
                    共 {{ proxies.length }} 条隧道
                  </template>
                  <template v-else> 从 {{ proxies.length }} 条隧道中检索 </template>
                </n-text>
              </template>
              <template #header-extra>
                <n-flex :size="[12, 0]">
                  <n-input
                    size="small"
                    :value="searchValue"
                    style="flex: 1"
                    placeholder="隧道 / 节点 , 名称 / ID "
                    @update:value="(x: string) => (searchValue = x)"
                    @input="searchForProxies"
                  >
                    <template v-if="searchValue.length !== 0" #suffix>
                      <n-tooltip>
                        <template #trigger>
                          <n-button
                            style="margin-right: -4px"
                            color="#888"
                            text
                            @click="
                              () => {
                                searchValue = '';
                                searchForProxies('');
                              }
                            "
                          >
                            <n-icon size="20" :component="CloseOutline"></n-icon>
                          </n-button>
                        </template>
                        清除内容
                      </n-tooltip>
                    </template>
                  </n-input>
                  <n-tooltip trigger="hover">
                    <template #trigger>
                      <n-button
                        :disabled="isChaning"
                        text
                        circle
                        @click="
                          () => {
                            searchValue = '';
                            refreshUserProxies();
                          }
                        "
                      >
                        <n-icon size="20">
                          <RefreshOutline />
                        </n-icon>
                      </n-button>
                    </template>
                    刷新隧道状态
                  </n-tooltip>
                </n-flex>
              </template>
              <n-data-table
                v-if="filltedProxies !== undefined && filltedProxies.length > 0"
                :bordered="false"
                :data="filltedProxies"
                :columns="proxiesColumnDefine"
              >
              </n-data-table>
              <template v-else-if="searchValue.length > 0">
                <br />
                <n-empty description="什么都搜不到，天空一片寂寥。">
                  <template #icon>
                    <n-icon :component="TelescopeOutline"> </n-icon>
                  </template>
                  <template #extra>
                    <n-text :depth="3"
                      >搜索方式: 隧道名称 / 隧道 ID / 节点名称 / 节点ID / 本地端口 / 远程端口 /
                      隧道类型 <br />符合其中一项的隧道将会在此列出。
                    </n-text>
                  </template>
                </n-empty>
                <br />
              </template>
            </n-card>
          </n-space>
          <!-- 没有隧道 -->
          <n-card v-else content-style="padding: 36px 12px;">
            <n-empty description="这里空荡荡的">
              <template #extra>
                <n-space>
                  <n-button
                    :disabled="isChaning"
                    secondary
                    :bordered="true"
                    @click="refreshUserProxies"
                  >
                    <template #icon>
                      <n-icon :component="RefreshOutline"></n-icon>
                    </template>
                    刷新
                  </n-button>
                  <n-button secondary @click="() => router.push('/create-proxies')">
                    <template #icon>
                      <n-icon :component="AddOutline"> </n-icon>
                    </template>

                    创建隧道
                  </n-button>
                </n-space>
              </template>
            </n-empty>
          </n-card>
        </n-gi>
        <n-gi span="1 xs:0">
          <!-- For mobile device -->
          <n-space vertical>
            <n-flex v-if="!(proxies?.length === 0)" :size="[4, 4]">
              <n-input
                :value="searchValue"
                style="flex: 1"
                placeholder="隧道 / 节点 , 名称 / ID "
                @update:value="(x: string) => (searchValue = x)"
                @input="searchForProxies"
              >
                <template v-if="searchValue.length !== 0" #suffix>
                  <n-tooltip>
                    <template #trigger>
                      <n-button
                        style="margin-right: -4px"
                        color="#888"
                        text
                        @click="
                          () => {
                            searchValue = '';
                            searchForProxies('');
                          }
                        "
                      >
                        <n-icon size="20" :component="CloseOutline"></n-icon>
                      </n-button>
                    </template>
                    清除内容
                  </n-tooltip>
                </template>
              </n-input>
              <n-button
                :focusable="false"
                :disabled="isChaning"
                secondary
                @click="
                  () => {
                    searchValue = '';
                    refreshUserProxies();
                  }
                "
              >
                <template #icon>
                  <n-icon :component="RefreshOutline"></n-icon>
                </template>
                刷新
              </n-button>
            </n-flex>
            <n-card v-if="proxies?.length === 0" content-style="padding: 16px 12px;">
              <br />
              <n-empty description="这里空荡荡的">
                <template #extra>
                  <n-space>
                    <n-button
                      :disabled="isChaning"
                      secondary
                      :bordered="true"
                      @click="refreshUserProxies"
                    >
                      <template #icon>
                        <n-icon :component="RefreshOutline"></n-icon>
                      </template>
                      刷新
                    </n-button>
                    <n-button secondary @click="() => router.push('/create-proxies')">
                      <template #icon>
                        <n-icon :component="AddOutline"> </n-icon>
                      </template>

                      创建隧道
                    </n-button>
                  </n-space>
                </template>
              </n-empty>
              <br />
            </n-card>
            <n-space
              v-else-if="filltedProxies !== undefined && filltedProxies.length > 0"
              vertical
              :size="[8, 8]"
            >
              <template v-for="proxy in filltedProxies" :key="proxy.proxyName">
                <n-card
                  :bordered="true"
                  header-style="padding: 18px 22px 18px 22px"
                  content-style="padding: 0px 22px 20px 22px;"
                >
                  <template #header-extra>
                    <n-space size="large">
                      <n-tooltip>
                        <template #trigger>
                          <n-button
                            circle
                            text
                            @click="
                              copy(proxy.connectAddress);
                              message.info('复制成功!');
                            "
                          >
                            <n-icon :component="CopyOutline"></n-icon>
                          </n-button>
                        </template>
                        复制链接
                      </n-tooltip>
                      <Menu
                        btn-style=""
                        :proxy="proxy"
                        :fallback="(key: string) => handleOnSelected(key, proxy)"
                      >
                      </Menu>
                    </n-space>
                  </template>
                  <template #header>
                    <div class="of-custom-header">
                      <div :class="proxy.online ? 'flag-online small' : 'flag-offline small'"></div>
                      <span style="margin-top: 0px; font-size: 1em">{{ proxy.proxyName }} </span>
                      <n-text style="margin-left: 4px; font-size: 0.8em" :depth="3"
                        >#{{ proxy.id }}</n-text
                      >
                    </div>
                  </template>
                  <n-grid style="margin-top: -1em" cols="1" x-gap="16" y-gap="16">
                    <n-gi>
                      <n-text :depth="3">#{{ proxy.nid }} {{ proxy.friendlyNode }}</n-text>
                    </n-gi>
                    <n-gi>
                      <n-space size="small" justify="space-between">
                        <n-space size="small">
                          <n-tag type="info">{{ proxy.proxyType.toUpperCase() }}</n-tag>
                          <n-tag v-if="!proxy.status" type="error">禁用</n-tag>
                          <n-tag v-if="proxy.useEncryption" type="warning">数据加密</n-tag>
                          <n-tag v-if="proxy.useCompression" type="warning">数据压缩</n-tag>
                        </n-space>
                        <n-tooltip trigger="hover">
                          <template #trigger>
                            <n-switch
                              :value="proxy.status"
                              :disabled="isChaning"
                              size="small"
                              @update:value="
                                (x: boolean) => {
                                  handleChangeSwitch(x, proxy);
                                }
                              "
                            >
                            </n-switch>
                          </template>
                          这里控制的是是否允许在客户端启动
                        </n-tooltip>
                      </n-space>
                    </n-gi>
                  </n-grid>
                </n-card>
              </template>
            </n-space>
            <n-card v-else-if="searchValue.length > 0" content-style="padding: 16px 12px;">
              <br />
              <n-empty description="什么都搜不到，天空一片寂寥。">
                <template #icon>
                  <n-icon :component="TelescopeOutline"> </n-icon>
                </template>
                <template #extra>
                  <n-text :depth="3"
                    >搜索方式: 隧道名称 / 隧道 ID / 节点名称 / 节点ID / 本地端口 / 远程端口 /
                    隧道类型 <br />符合其中一项的隧道将会在此列出。
                  </n-text>
                </template>
              </n-empty>
              <br />
            </n-card>
          </n-space>
        </n-gi>
      </n-grid>
    </template>
  </div>
</template>

name: Release
on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        arch: [x64, arm64]
        exclude:
          - platform: macos-latest
            arch: x64
          - platform: macos-latest
            arch: arm64
        include:
          - platform: macos-latest
            arch: universal
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Rust (Stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'windows-latest' && matrix.arch == 'arm64' && 'aarch64-pc-windows-msvc' || matrix.platform == 'ubuntu-latest' && matrix.arch == 'arm64' && 'aarch64-unknown-linux-gnu' || matrix.platform == 'macos-latest' && matrix.arch == 'universal' && 'aarch64-apple-darwin x86_64-apple-darwin' || '' }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "tauri-build-${{ matrix.platform }}-${{ matrix.arch || 'x64' }}"
          cache-on-failure: true

      - name: Install Dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libssl-dev \
            pkg-config

          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo dpkg --add-architecture arm64
            sudo apt-get update
            sudo apt-get install -y \
              gcc-aarch64-linux-gnu \
              g++-aarch64-linux-gnu \
              binutils-aarch64-linux-gnu \
              libc6-dev-arm64-cross \
              libssl-dev:arm64

            echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
            echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=/usr/include/aarch64-linux-gnu" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          fi

      - name: Install frontend dependencies
        run: npm install

      - name: Install macOS targets
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin aarch64-apple-darwin

      - name: Setup Windows ARM64 environment
        if: matrix.platform == 'windows-latest' && matrix.arch == 'arm64'
        run: |
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV

      - name: Build the app (Standard x64)
        if: matrix.arch == 'x64'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true

      - name: Build the app (ARM64)
        if: matrix.arch == 'arm64'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: ${{ matrix.platform == 'ubuntu-latest' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.platform == 'ubuntu-latest' && 'aarch64-linux-gnu-gcc' || '' }}
          CC_aarch64_unknown_linux_gnu: ${{ matrix.platform == 'ubuntu-latest' && 'aarch64-linux-gnu-gcc' || '' }}
          CXX_aarch64_unknown_linux_gnu: ${{ matrix.platform == 'ubuntu-latest' && 'aarch64-linux-gnu-g++' || '' }}
          OPENSSL_DIR: ${{ matrix.platform == 'ubuntu-latest' && '/usr' || '' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.platform == 'ubuntu-latest' && '/usr/include/aarch64-linux-gnu' || '' }}
          OPENSSL_LIB_DIR: ${{ matrix.platform == 'ubuntu-latest' && '/usr/lib/aarch64-linux-gnu' || '' }}
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true
          args: --target ${{ matrix.platform == 'windows-latest' && 'aarch64-pc-windows-msvc' || 'aarch64-unknown-linux-gnu' }}

      - name: Build the app (macOS universal)
        if: matrix.platform == 'macos-latest' && matrix.arch == 'universal'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          MACOSX_DEPLOYMENT_TARGET: 10.14
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true
          args: --target universal-apple-darwin

      - name: Generate Signatures File
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p signatures
          
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              cargo tauri signer sign ./src-tauri/target/aarch64-pc-windows-msvc/release/bundle/msi/*.msi > signatures/windows-arm64-signature.txt
              cargo tauri signer sign ./src-tauri/target/aarch64-pc-windows-msvc/release/bundle/nsis/*.exe >> signatures/windows-arm64-signature.txt
            else
              cargo tauri signer sign ./src-tauri/target/release/bundle/msi/*.msi > signatures/windows-x64-signature.txt
              cargo tauri signer sign ./src-tauri/target/release/bundle/nsis/*.exe >> signatures/windows-x64-signature.txt
            fi
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            cargo tauri signer sign ./src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg > signatures/macos-universal-signature.txt
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              cargo tauri signer sign ./src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage > signatures/linux-arm64-signature.txt
            else
              cargo tauri signer sign ./src-tauri/target/release/bundle/appimage/*.AppImage > signatures/linux-x64-signature.txt
            fi
          fi

      - name: Collect Tauri Updater Files
        if: startsWith(github.ref, 'refs/tags/')
        id: collect_updater
        run: |
          TAURI_VERSION=$(grep -o '"version": *"[^"]*"' ./src-tauri/tauri.conf.json | cut -d'"' -f4)
          mkdir -p updater-files
          
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              cp ./src-tauri/target/aarch64-pc-windows-msvc/release/*.json updater-files/ || true
            else
              cp ./src-tauri/target/release/*.json updater-files/ || true
            fi
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            cp ./src-tauri/target/universal-apple-darwin/release/*.json updater-files/ || true
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              cp ./src-tauri/target/aarch64-unknown-linux-gnu/release/*.json updater-files/ || true
            else
              cp ./src-tauri/target/release/*.json updater-files/ || true
            fi
          fi
          
          cp -r signatures/* updater-files/ || true
          
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            # Windows specific update info
            echo "{\"version\":\"${TAURI_VERSION}\",\"releaseDate\":\"${BUILD_DATE}\"}" > updater-files/update-info.json
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            # macOS specific update info
            echo "{\"version\":\"${TAURI_VERSION}\",\"releaseDate\":\"${BUILD_DATE}\"}" > updater-files/update-info.json
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            # Linux specific update info
            echo "{\"version\":\"${TAURI_VERSION}\",\"releaseDate\":\"${BUILD_DATE}\"}" > updater-files/update-info.json
          fi
          
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            zip -r updater-windows-${{ matrix.arch || 'x64' }}.zip updater-files
            echo "updater_zip=updater-windows-${{ matrix.arch || 'x64' }}.zip" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            zip -r updater-macos-universal.zip updater-files
            echo "updater_zip=updater-macos-universal.zip" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            zip -r updater-linux-${{ matrix.arch || 'x64' }}.zip updater-files
            echo "updater_zip=updater-linux-${{ matrix.arch || 'x64' }}.zip" >> $GITHUB_OUTPUT
          fi

      - name: Upload Updater Files
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: tauri-updater-${{ matrix.platform }}-${{ matrix.arch || 'x64' }}
          path: ${{ steps.collect_updater.outputs.updater_zip }}
          if-no-files-found: warn

      - name: Upload Signatures
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: update-signatures-${{ matrix.platform }}-${{ matrix.arch || 'x64' }}
          path: signatures/*
          if-no-files-found: warn

      - name: Import Code Signing Certificates (macOS only)
        if: matrix.platform == 'macos-latest'
        uses: apple-actions/import-codesign-certs@v3
        with: 
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD || github.run_id }}

      - name: Sign .app with Hardened Runtime (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          codesign --deep --force --verify --verbose \
            --options runtime \
            --entitlements ./macos.entitlements \
            --sign "Developer ID Application: Enjie Ye (W6D36R8RMG)" \
            "$GITHUB_WORKSPACE/src-tauri/target/universal-apple-darwin/release/bundle/macos/OpenFrp-CrossPlatformLauncher.app"

      - name: Create and Sign DMG (macOS only)
        if: matrix.platform == 'macos-latest'
        id: create_dmg
        run: |
          brew install create-dmg || true
          
          APP_PATH="$GITHUB_WORKSPACE/src-tauri/target/universal-apple-darwin/release/bundle/macos/OpenFrp-CrossPlatformLauncher.app"
          DMG_PATH="$GITHUB_WORKSPACE/OpenFrp-CrossPlatformLauncher.dmg"
          
          create-dmg \
            --volname "OpenFrp-CrossPlatformLauncher" \
            --window-pos 200 120 \
            --window-size 700 400 \
            --icon "OpenFrp-CrossPlatformLauncher.app" 200 190 \
            --app-drop-link 600 185 \
            "$DMG_PATH" \
            "$APP_PATH"
          
          codesign --force --verify --verbose \
            --sign "Developer ID Application: Enjie Ye (W6D36R8RMG)" \
            "$DMG_PATH"
          
          echo "dmg_path=$DMG_PATH" >> $GITHUB_OUTPUT

      - name: Notarize DMG (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          DMG_PATH="${{ steps.create_dmg.outputs.dmg_path }}"
          
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_SPECIFIC_PASSWORD }}" \
            --team-id "${{ secrets.TEAM_ID }}" \
            --wait
          
          xcrun stapler staple "$DMG_PATH"

      - name: Verify Notarization (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          xcrun stapler validate "${{ steps.create_dmg.outputs.dmg_path }}"
          spctl -a -t install -v "${{ steps.create_dmg.outputs.dmg_path }}"

      - name: Prepare Release Assets (macOS only)
        if: matrix.platform == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=$(grep -o '"version": *"[^"]*"' ./src-tauri/tauri.conf.json | cut -d'"' -f4)
          DMG_PATH="${{ steps.create_dmg.outputs.dmg_path }}"
          SIGNED_DMG_NAME="OpenFrp-CrossPlatformLauncher-${VERSION}-macos-universal-signed.dmg"
          
          cp "$DMG_PATH" "$SIGNED_DMG_NAME"
          
          echo "signed_dmg_name=$SIGNED_DMG_NAME" >> $GITHUB_OUTPUT
          echo "signed_dmg_path=$(pwd)/$SIGNED_DMG_NAME" >> $GITHUB_OUTPUT

      - name: Upload Release Assets (macOS only)
        if: matrix.platform == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.prepare_release_assets.outputs.signed_dmg_path }}
            ${{ steps.collect_updater.outputs.updater_zip }}
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (dev build only)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: OpenFrp-CPL-${{ matrix.platform }}-${{ matrix.arch || 'x64' }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/aarch64-pc-windows-msvc/release/bundle/msi/*.msi
            src-tauri/target/aarch64-pc-windows-msvc/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
            ${{ steps.create_dmg.outputs.dmg_path }}
          if-no-files-found: ignore
          compression-level: 0

name: Release
on:
  push:
    branches: [ main ]  # 开发构建：推送到主分支时触发
    tags: [ 'v*' ]     # 发布构建：推送标签时触发
  workflow_dispatch:  

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        arch: [x64, arm64]
        exclude:
          - platform: macos-latest  # 排除所有macOS特定架构
            arch: x64
          - platform: macos-latest
            arch: arm64
        include:
          # 只保留macOS universal架构
          - platform: macos-latest
            arch: universal
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Rust (Stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'windows-latest' && matrix.arch == 'arm64' && 'aarch64-pc-windows-msvc' || matrix.platform == 'ubuntu-latest' && matrix.arch == 'arm64' && 'aarch64-unknown-linux-gnu' || matrix.platform == 'macos-latest' && matrix.arch == 'universal' && 'aarch64-apple-darwin x86_64-apple-darwin' || '' }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "tauri-build-${{ matrix.platform }}-${{ matrix.arch || 'x64' }}"
          cache-on-failure: true

      - name: Install Dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          
          # 如果是 ARM64 构建，安装交叉编译工具和开发库
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            # 安装ARM64的OpenSSL开发库
            sudo apt-get install -y libssl-dev:arm64
            # 设置正确的pkg-config路径
            echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          fi

      - name: Install frontend dependencies
        run: npm install

      # macOS 特定设置
      - name: Install macOS targets
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin aarch64-apple-darwin

      # 为 Windows ARM64 设置环境
      - name: Setup Windows ARM64 environment
        if: matrix.platform == 'windows-latest' && matrix.arch == 'arm64'
        run: |
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV

      # Windows 和 Linux 标准 x64 构建
      - name: Build the app (Standard x64)
        if: matrix.arch == 'x64'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true

      # ARM64 特定构建
      - name: Build the app (ARM64)
        if: matrix.arch == 'arm64'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.platform == 'ubuntu-latest' && '1' || '' }}
          PKG_CONFIG_PATH: ${{ matrix.platform == 'ubuntu-latest' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.platform == 'ubuntu-latest' && 'aarch64-linux-gnu-gcc' || '' }}
          OPENSSL_DIR: ${{ matrix.platform == 'ubuntu-latest' && '/usr' || '' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.platform == 'ubuntu-latest' && '/usr/include' || '' }}
          OPENSSL_LIB_DIR: ${{ matrix.platform == 'ubuntu-latest' && '/usr/lib/aarch64-linux-gnu' || '' }}
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true
          args: --target ${{ matrix.platform == 'windows-latest' && 'aarch64-pc-windows-msvc' || 'aarch64-unknown-linux-gnu' }}

      # macOS 通用二进制构建
      - name: Build the app (macOS universal)
        if: matrix.platform == 'macos-latest' && matrix.arch == 'universal'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE_PASSWORD != '' && startsWith(github.ref, 'refs/tags/') }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          MACOSX_DEPLOYMENT_TARGET: 10.14
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true
          args: --target universal-apple-darwin

      - name: Generate Signatures File
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "正在生成签名文件..."
          mkdir -p signatures
          
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              cargo tauri signer sign ./src-tauri/target/aarch64-pc-windows-msvc/release/bundle/msi/*.msi > signatures/windows-arm64-signature.txt
              cargo tauri signer sign ./src-tauri/target/aarch64-pc-windows-msvc/release/bundle/nsis/*.exe >> signatures/windows-arm64-signature.txt
            else
              cargo tauri signer sign ./src-tauri/target/release/bundle/msi/*.msi > signatures/windows-x64-signature.txt
              cargo tauri signer sign ./src-tauri/target/release/bundle/nsis/*.exe >> signatures/windows-x64-signature.txt
            fi
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            cargo tauri signer sign ./src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg > signatures/macos-universal-signature.txt
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              cargo tauri signer sign ./src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage > signatures/linux-arm64-signature.txt
            else
              cargo tauri signer sign ./src-tauri/target/release/bundle/appimage/*.AppImage > signatures/linux-x64-signature.txt
            fi
          fi

      # 新增：收集并打包 Tauri 更新器文件
      - name: Collect Tauri Updater Files
        if: startsWith(github.ref, 'refs/tags/')
        id: collect_updater
        run: |
          # 从 tauri.conf.json 中提取版本号
          TAURI_VERSION=$(grep -o '"version": *"[^"]*"' ./src-tauri/tauri.conf.json | cut -d'"' -f4)
          echo "从 tauri.conf.json 提取的版本号: ${TAURI_VERSION}"
          
          # 从 git 标签中提取版本号
          GIT_VERSION="${{ github.ref_name }}"
          GIT_VERSION="${GIT_VERSION#v}"  # 移除版本号前的 'v'
          echo "从 git 标签提取的版本号: ${GIT_VERSION}"
          
          # 使用 tauri.conf.json 中的版本号
          VERSION="${TAURI_VERSION}"
          echo "使用的版本号: ${VERSION}"
          
          echo "收集 Tauri 更新器文件..."
          mkdir -p updater-files
          
          # 复制更新器 JSON 文件
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              cp ./src-tauri/target/aarch64-pc-windows-msvc/release/*.json updater-files/ || true
            else
              cp ./src-tauri/target/release/*.json updater-files/ || true
            fi
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            cp ./src-tauri/target/universal-apple-darwin/release/*.json updater-files/ || true
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              cp ./src-tauri/target/aarch64-unknown-linux-gnu/release/*.json updater-files/ || true
            else
              cp ./src-tauri/target/release/*.json updater-files/ || true
            fi
          fi
          
          # 复制签名文件
          cp -r signatures/* updater-files/ || true
          
          # 创建更新信息 JSON 文件
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # 获取文件大小和哈希值
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              MSI_PATH=$(find ./src-tauri/target/aarch64-pc-windows-msvc/release/bundle/msi -name "*.msi" | head -n 1)
              EXE_PATH=$(find ./src-tauri/target/aarch64-pc-windows-msvc/release/bundle/nsis -name "*.exe" | head -n 1)
              MSI_SIZE=$(stat -c%s "$MSI_PATH" 2>/dev/null || stat -f%z "$MSI_PATH")
              EXE_SIZE=$(stat -c%s "$EXE_PATH" 2>/dev/null || stat -f%z "$EXE_PATH")
              MSI_HASH=$(sha256sum "$MSI_PATH" | cut -d ' ' -f 1)
              EXE_HASH=$(sha256sum "$EXE_PATH" | cut -d ' ' -f 1)
              PLATFORM_INFO="windows-arm64"
            else
              MSI_PATH=$(find ./src-tauri/target/release/bundle/msi -name "*.msi" | head -n 1)
              EXE_PATH=$(find ./src-tauri/target/release/bundle/nsis -name "*.exe" | head -n 1)
              MSI_SIZE=$(stat -c%s "$MSI_PATH" 2>/dev/null || stat -f%z "$MSI_PATH")
              EXE_SIZE=$(stat -c%s "$EXE_PATH" 2>/dev/null || stat -f%z "$EXE_PATH")
              MSI_HASH=$(sha256sum "$MSI_PATH" | cut -d ' ' -f 1)
              EXE_HASH=$(sha256sum "$EXE_PATH" | cut -d ' ' -f 1)
              PLATFORM_INFO="windows-x64"
            fi
            
            # 创建 Windows 更新信息 JSON
            cat > updater-files/update-info.json << EOF
            {
              "version": "${VERSION}",
              "releaseDate": "${BUILD_DATE}",
              "platform": "${PLATFORM_INFO}",
              "files": {
                "msi": {
                  "size": ${MSI_SIZE},
                  "sha256": "${MSI_HASH}",
                  "filename": "$(basename "$MSI_PATH")"
                },
                "exe": {
                  "size": ${EXE_SIZE},
                  "sha256": "${EXE_HASH}",
                  "filename": "$(basename "$EXE_PATH")"
                }
              },
              "signatures": {
                "msi": "$(cat signatures/*-signature.txt | grep -A 1 "$(basename "$MSI_PATH")" | tail -n 1)",
                "exe": "$(cat signatures/*-signature.txt | grep -A 1 "$(basename "$EXE_PATH")" | tail -n 1)"
              }
            }
            EOF
            
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            DMG_PATH="${{ steps.create_dmg.outputs.dmg_path }}"
            DMG_SIZE=$(stat -c%s "$DMG_PATH" 2>/dev/null || stat -f%z "$DMG_PATH")
            DMG_HASH=$(shasum -a 256 "$DMG_PATH" | cut -d ' ' -f 1)
            
            # 创建 macOS 更新信息 JSON
            cat > updater-files/update-info.json << EOF
            {
              "version": "${VERSION}",
              "releaseDate": "${BUILD_DATE}",
              "platform": "macos-universal",
              "files": {
                "dmg": {
                  "size": ${DMG_SIZE},
                  "sha256": "${DMG_HASH}",
                  "filename": "$(basename "$DMG_PATH")",
                  "notarized": true
                }
              },
              "signatures": {
                "dmg": "$(cat signatures/*-signature.txt | grep -A 1 "$(basename "$DMG_PATH")" | tail -n 1 || echo "")"
              }
            }
            EOF
            
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              APPIMAGE_PATH=$(find ./src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage -name "*.AppImage" | head -n 1)
              DEB_PATH=$(find ./src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb -name "*.deb" | head -n 1)
              APPIMAGE_SIZE=$(stat -c%s "$APPIMAGE_PATH" 2>/dev/null || stat -f%z "$APPIMAGE_PATH")
              DEB_SIZE=$(stat -c%s "$DEB_PATH" 2>/dev/null || stat -f%z "$DEB_PATH")
              APPIMAGE_HASH=$(sha256sum "$APPIMAGE_PATH" | cut -d ' ' -f 1)
              DEB_HASH=$(sha256sum "$DEB_PATH" | cut -d ' ' -f 1)
              PLATFORM_INFO="linux-arm64"
            else
              APPIMAGE_PATH=$(find ./src-tauri/target/release/bundle/appimage -name "*.AppImage" | head -n 1)
              DEB_PATH=$(find ./src-tauri/target/release/bundle/deb -name "*.deb" | head -n 1)
              APPIMAGE_SIZE=$(stat -c%s "$APPIMAGE_PATH" 2>/dev/null || stat -f%z "$APPIMAGE_PATH")
              DEB_SIZE=$(stat -c%s "$DEB_PATH" 2>/dev/null || stat -f%z "$DEB_PATH")
              APPIMAGE_HASH=$(sha256sum "$APPIMAGE_PATH" | cut -d ' ' -f 1)
              DEB_HASH=$(sha256sum "$DEB_PATH" | cut -d ' ' -f 1)
              PLATFORM_INFO="linux-x64"
            fi
            
            # 创建 Linux 更新信息 JSON
            cat > updater-files/update-info.json << EOF
            {
              "version": "${VERSION}",
              "releaseDate": "${BUILD_DATE}",
              "platform": "${PLATFORM_INFO}",
              "files": {
                "appimage": {
                  "size": ${APPIMAGE_SIZE},
                  "sha256": "${APPIMAGE_HASH}",
                  "filename": "$(basename "$APPIMAGE_PATH")"
                },
                "deb": {
                  "size": ${DEB_SIZE},
                  "sha256": "${DEB_HASH}",
                  "filename": "$(basename "$DEB_PATH")"
                }
              },
              "signatures": {
                "appimage": "$(cat signatures/*-signature.txt | grep -A 1 "$(basename "$APPIMAGE_PATH")" | tail -n 1 || echo "")"
              }
            }
            EOF
          fi
          
          # 创建压缩包
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              zip -r updater-windows-arm64.zip updater-files
              echo "updater_zip=updater-windows-arm64.zip" >> $GITHUB_OUTPUT
            else
              zip -r updater-windows-x64.zip updater-files
              echo "updater_zip=updater-windows-x64.zip" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            zip -r updater-macos-universal.zip updater-files
            echo "updater_zip=updater-macos-universal.zip" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              zip -r updater-linux-arm64.zip updater-files
              echo "updater_zip=updater-linux-arm64.zip" >> $GITHUB_OUTPUT
            else
              zip -r updater-linux-x64.zip updater-files
              echo "updater_zip=updater-linux-x64.zip" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload Updater Files
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: tauri-updater-${{ matrix.platform }}-${{ matrix.arch || 'x64' }}
          path: ${{ steps.collect_updater.outputs.updater_zip }}
          if-no-files-found: warn

      - name: Upload Signatures
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: update-signatures-${{ matrix.platform }}-${{ matrix.arch || 'x64' }}
          path: signatures/*
          if-no-files-found: warn

      # macOS 代码签名和公证
      - name: Import Code Signing Certificates (macOS only)
        if: matrix.platform == 'macos-latest' && secrets.CERTIFICATES_P12 != ''
        uses: apple-actions/import-codesign-certs@v3
        with: 
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD || github.run_id }}

      - name: Prepare macOS entitlements file
        if: matrix.platform == 'macos-latest'
        run: |
          cat > macos.entitlements << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.network.client</key>
              <true/>
              <key>com.apple.security.network.server</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-write</key>
              <true/>
              <key>com.apple.security.files.downloads.read-write</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Sign .app with Hardened Runtime (macOS only)
        if: matrix.platform == 'macos-latest' && secrets.CERTIFICATES_P12 != ''
        run: |
          echo "Signing .app with Hardened Runtime"
          codesign --deep --force --verify --verbose \
            --options runtime \
            --entitlements ./macos.entitlements \
            --sign "Developer ID Application: jinxin li (NCQ5SP3RL2)" \
            /Users/runner/work/OpenFrp-CrossPlatformLauncher/OpenFrp-CrossPlatformLauncher/src-tauri/target/universal-apple-darwin/release/bundle/macos/OpenFrp-CrossPlatformLauncher.app

      - name: Create and Sign DMG (macOS only)
        if: matrix.platform == 'macos-latest'
        id: create_dmg
        run: |
          echo "Creating signed DMG"
          # 安装 create-dmg
          brew install create-dmg || true
          
          # 设置输出路径
          APP_PATH="/Users/runner/work/OpenFrp-CrossPlatformLauncher/OpenFrp-CrossPlatformLauncher/src-tauri/target/universal-apple-darwin/release/bundle/macos/OpenFrp-CrossPlatformLauncher.app"
          DMG_PATH="/Users/runner/work/OpenFrp-CrossPlatformLauncher/OpenFrp-CrossPlatformLauncher/src-tauri/target/OpenFrp-CrossPlatformLauncher.dmg"
          
          # 创建 DMG
          create-dmg \
            --volname "OpenFrp-CrossPlatformLauncher" \
            --window-pos 200 120 \
            --window-size 700 400 \
            --icon "OpenFrp-CrossPlatformLauncher.app" 200 190 \
            --app-drop-link 600 185 \
            "${DMG_PATH}" \
            "${APP_PATH}"
          
          # 签名 DMG
          codesign --force --verify --verbose \
            --sign "Developer ID Application: jinxin li (NCQ5SP3RL2)" \
            "${DMG_PATH}"
          
          echo "dmg_path=${DMG_PATH}" >> $GITHUB_OUTPUT

      - name: Notarize DMG (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Submitting DMG for notarization"
          # 创建临时文件来存储公证信息
          NOTARIZATION_INFO=$(mktemp)
          
          # 提交公证请求
          xcrun notarytool submit "${{ steps.create_dmg.outputs.dmg_path }}" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_SPECIFIC_PASSWORD }}" \
            --team-id "${{ secrets.TEAM_ID }}" \
            --wait > "${NOTARIZATION_INFO}"
          
          # 检查公证结果
          if ! grep -q "status: Accepted" "${NOTARIZATION_INFO}"; then
            echo "公证失败，详细信息："
            cat "${NOTARIZATION_INFO}"
            exit 1
          fi
          
          echo "公证成功，正在添加公证戳章..."
          xcrun stapler staple "${{ steps.create_dmg.outputs.dmg_path }}"
          
          # 验证公证戳章
          xcrun stapler validate "${{ steps.create_dmg.outputs.dmg_path }}"

      # 上传已签名和公证的 DMG 到 Release
      - name: Upload signed DMG to Release (macOS only)
        if: matrix.platform == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.create_dmg.outputs.dmg_path }}
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 上传开发构建的制品
      - name: Upload artifacts (dev build only)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: OpenFrp-CPL-${{ matrix.platform }}-${{ matrix.arch || 'x64' }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/aarch64-pc-windows-msvc/release/bundle/msi/*.msi
            src-tauri/target/aarch64-pc-windows-msvc/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
            ${{ steps.create_dmg.outputs.dmg_path }}
          if-no-files-found: ignore
          compression-level: 0

      # 上传更新器文件到 Release
      - name: Upload Updater Files to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.collect_updater.outputs.updater_zip }}
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
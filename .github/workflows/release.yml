name: Release
on:
  push:
    branches: [ main ]  # 开发构建：推送到主分支时触发
    tags: [ 'v*' ]     # 发布构建：推送标签时触发
  workflow_dispatch:  

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'  # 添加 npm 缓存

      - name: Install Rust (Stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache  # 添加 Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "tauri-build-${{ matrix.platform }}"
          cache-on-failure: true

      - name: Install Dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm install

      - name: Install x86_64 Target (macos)
        if: matrix.platform == 'macos-latest'
        run: rustup target add x86_64-apple-darwin

      - name: Build the app (macos aarch64 + other platform)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true

      - name: Build the app (macos x86_64)
        if: matrix.platform == 'macos-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true
          args: --target x86_64-apple-darwin

      - name: Build the app (macos universal)
        if: matrix.platform == 'macos-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true
          args: --target universal-apple-darwin
          
      - name: Generate Signatures File
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "正在生成签名文件..."
          mkdir -p signatures
          
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            cargo tauri signer sign ./src-tauri/target/release/bundle/msi/*.msi > signatures/windows-signature.txt
            cargo tauri signer sign ./src-tauri/target/release/bundle/nsis/*.exe >> signatures/windows-signature.txt
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            cargo tauri signer sign ./src-tauri/target/release/bundle/dmg/*.dmg > signatures/macos-signature.txt
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            cargo tauri signer sign ./src-tauri/target/release/bundle/appimage/*.AppImage > signatures/linux-signature.txt
          fi

      - name: Upload Signatures
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: update-signatures-${{ matrix.platform }}
          path: signatures/*
          if-no-files-found: warn

      # 下面是 macOS 专用步骤
      - name: Import Code Signing Certificates (macOS only)
        if: matrix.platform == 'macos-latest'
        # 使用 import-codesign-certs action 导入证书
        uses: apple-actions/import-codesign-certs@v3
        with: 
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      - name: Sign .app with Hardened Runtime (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Signing .app with Hardened Runtime"
          codesign --deep --force --verify --verbose \
            --options runtime \
            --entitlements ./macos.entitlements \
            --sign "Developer ID Application: jinxin li (NCQ5SP3RL2)" \
            /Users/runner/work/OpenFrp-CrossPlatformLauncher/OpenFrp-CrossPlatformLauncher/src-tauri/target/release/bundle/macos/OpenFrp-CrossPlatformLauncher.app

      - name: Determine DMG filename (macOS only)
        if: matrix.platform == 'macos-latest'
        id: dmg_name
        run: |
          # 查找生成的原始 DMG 文件（假设只有一个）
          original_dmg=$(ls ./src-tauri/target/release/bundle/dmg/*.dmg | head -n 1)
          echo "Found original DMG: $original_dmg"
          # 构造新的 DMG 名称，在原始名称后加 _signed
          signed_dmg="${original_dmg%.dmg}_signed.dmg"
          echo "Signed DMG will be: $signed_dmg"
          echo "signed_dmg=$signed_dmg" >> $GITHUB_OUTPUT

      - name: Create Signing DMG (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Packaging signed .app into DMG"
          brew install create-dmg || true
          create-dmg \
            --volname "OpenFrp-CrossPlatformLauncher" \
            --window-pos 200 120 \
            --window-size 700 400 \
            --icon "OpenFrp-CrossPlatformLauncher.app" 200 190 \
            --app-drop-link 600 185 \
            "${{ steps.dmg_name.outputs.signed_dmg }}" \
            /Users/runner/work/OpenFrp-CrossPlatformLauncher/OpenFrp-CrossPlatformLauncher/src-tauri/target/release/bundle/macos/OpenFrp-CrossPlatformLauncher.app

      - name: Sign DMG (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Signing DMG"
          codesign --force --verify --verbose \
            --sign "Developer ID Application: jinxin li (NCQ5SP3RL2)" \
            "${{ steps.dmg_name.outputs.signed_dmg }}"

      - name: Notarize DMG (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Submitting DMG for notarization"
          xcrun notarytool submit "${{ steps.dmg_name.outputs.signed_dmg }}" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_SPECIFIC_PASSWORD }}" \
            --team-id "${{ secrets.TEAM_ID }}" \
            --wait
          echo "Stapling DMG..."
          xcrun stapler staple "${{ steps.dmg_name.outputs.signed_dmg }}"

      # 添加这个新步骤来上传签名后的 DMG 文件到 Release
      - name: Upload signed DMG to Release (macOS only)
        if: matrix.platform == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.dmg_name.outputs.signed_dmg }}
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (dev build only)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: OpenFrp-CPL-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/dmg/*.dmg
            ${{ steps.dmg_name.outputs.signed_dmg }}
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
          if-no-files-found: ignore
          compression-level: 0